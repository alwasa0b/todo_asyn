{"version":3,"sources":["../../src/api/todos.js"],"names":["config","db","id","load","req","callback","todo","todos","find","err","index","res","params","json","create","body","length","toString","push","read","update","key","sendStatus","delete","splice","indexOf"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe;AAAA,MAAGA,MAAH,QAAGA,MAAH;AAAA,MAAWC,EAAX,QAAWA,EAAX;AAAA,SACb,wCAAS;AACP;AACAC,QAAI,MAFG;;AAIP;;;AAGAC,QAPO,gBAOFC,GAPE,EAOGF,EAPH,EAOOG,QAPP,EAOiB;AACtB,UAAIC,OAAOC,gBAAMC,IAAN,CAAW;AAAA,eAAQF,KAAKJ,EAAL,KAAYA,EAApB;AAAA,OAAX,CAAX;AAAA,UACEO,MAAMH,OAAO,IAAP,GAAc,WADtB;AAEAD,eAASI,GAAT,EAAcH,IAAd;AACD,KAXM;;;AAaP;AACAI,SAdO,wBAcWC,GAdX,EAcgB;AAAA,UAAfC,MAAe,SAAfA,MAAe;;AACrBD,UAAIE,IAAJ,CAASN,eAAT;AACD,KAhBM;;;AAkBP;AACAO,UAnBO,yBAmBUH,GAnBV,EAmBe;AAAA,UAAbI,IAAa,SAAbA,IAAa;;AACpBA,WAAKb,EAAL,GAAUK,gBAAMS,MAAN,CAAaC,QAAb,CAAsB,EAAtB,CAAV;AACAV,sBAAMW,IAAN,CAAWH,IAAX;AACAJ,UAAIE,IAAJ,CAASE,IAAT;AACD,KAvBM;;;AAyBP;AACAI,QA1BO,uBA0BQR,GA1BR,EA0Ba;AAAA,UAAbL,IAAa,SAAbA,IAAa;;AAClBK,UAAIE,IAAJ,CAASP,IAAT;AACD,KA5BM;;;AA8BP;AACAc,UA/BO,yBA+BgBT,GA/BhB,EA+BqB;AAAA,UAAnBL,IAAmB,SAAnBA,IAAmB;AAAA,UAAbS,IAAa,SAAbA,IAAa;;AAC1B,WAAK,IAAIM,GAAT,IAAgBN,IAAhB,EAAsB;AACpB,YAAIM,QAAQ,IAAZ,EAAkB;AAChBf,eAAKe,GAAL,IAAYN,KAAKM,GAAL,CAAZ;AACD;AACF;AACDV,UAAIW,UAAJ,CAAe,GAAf;AACD,KAtCM;;;AAwCP;AACAC,UAzCO,0BAyCUZ,GAzCV,EAyCe;AAAA,UAAbL,IAAa,SAAbA,IAAa;;AACpBC,sBAAMiB,MAAN,CAAajB,gBAAMkB,OAAN,CAAcnB,IAAd,CAAb,EAAkC,CAAlC;AACAK,UAAIW,UAAJ,CAAe,GAAf;AACD;AA5CM,GAAT,CADa;AAAA,C","file":"todos.js","sourcesContent":["import resource from \"resource-router-middleware\";\r\nimport todos from \"../models/todos\";\r\n\r\nexport default ({ config, db }) =>\r\n  resource({\r\n    /** Property name to store preloaded entity on `request`. */\r\n    id: \"todo\",\r\n\r\n    /** For requests with an `id`, you can auto-load the entity.\r\n     *  Errors terminate the request, success sets `req[id] = data`.\r\n     */\r\n    load(req, id, callback) {\r\n      let todo = todos.find(todo => todo.id === id),\r\n        err = todo ? null : \"Not found\";\r\n      callback(err, todo);\r\n    },\r\n\r\n    /** GET / - List all entities */\r\n    index({ params }, res) {\r\n      res.json(todos);\r\n    },\r\n\r\n    /** POST / - Create a new entity */\r\n    create({ body }, res) {\r\n      body.id = todos.length.toString(36);\r\n      todos.push(body);\r\n      res.json(body);\r\n    },\r\n\r\n    /** GET /:id - Return a given entity */\r\n    read({ todo }, res) {\r\n      res.json(todo);\r\n    },\r\n\r\n    /** PUT /:id - Update a given entity */\r\n    update({ todo, body }, res) {\r\n      for (let key in body) {\r\n        if (key !== \"id\") {\r\n          todo[key] = body[key];\r\n        }\r\n      }\r\n      res.sendStatus(204);\r\n    },\r\n\r\n    /** DELETE /:id - Delete a given entity */\r\n    delete({ todo }, res) {\r\n      todos.splice(todos.indexOf(todo), 1);\r\n      res.sendStatus(204);\r\n    }\r\n  });\r\n"]}